{{- if eq .Values.global.clusterInfo.role "host" }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-hooks
  namespace: {{ template "logsidecar-injector.namespace" . }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-hooks
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
rules:
  - verbs:
      - 'create'
      - 'patch'
      - 'update'
      - 'get'
    apiGroups:
      - 'extensions.kubesphere.io'
      - 'kubesphere.io'
    resources:
      - '*'

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-hooks
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-hooks
    namespace: {{ template "logsidecar-injector.namespace" . }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-hooks
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-hooks
  namespace: {{ template "logsidecar-injector.namespace" . }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "4"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  backoffLimit: {{ .Values.hook.postInstall.backoffLimit }}
  template:
    metadata:
      name: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}-hooks
      restartPolicy: Never
      containers:
        - name: annotate-job
          image: {{ .Values.hook.postInstall.image.repo }}:{{ .Values.hook.postInstall.image.tag }}
          command:
            - /bin/bash
            - -c
            - |
              string_in_array() {
                  local search_string="$1"
                  shift
                  local my_array=("$@")
                  for element in "${my_array[@]}"; do
                    if [[ "$element" == "$search_string" ]]; then
                      return 0
                    fi
                  done
                  return 1
              }
              json_file=`kubectl get installplan whizard-logging -o json`
              install_array=`echo $json_file | jq '.spec.clusterScheduling.placement.clusters'`
              placement_clusters=($(echo "$install_array" | jq -r '.[]'))
              echo "placement_clusters:${placement_clusters[@]}"
              default_config_enabled=$(echo "$json_file" | jq '.spec.config' | grep -oP 'enabled: \K[^"]+' | sed 's/\\n//g' | awk '{print $1}')
              overrides=$(echo $json_file | jq '.spec.clusterScheduling.overrides')

              if [[ "$overrides" == "null" && "$default_config_enabled" == "false" ]]; then
                kubectl annotate --overwrite extension whizard-logging logging.kubesphere.io/enable-loggingsidecar=""
                exit 0
              fi
              if [[ "$overrides" == "null" && "$default_config_enabled" == "true" ]]; then
                result=""
                delimiter=","
                for element in "${placement_clusters[@]}"; do
                  result+="$element$delimiter"
                done
                result="${result%$delimiter}"
                echo $result
                kubectl annotate --overwrite extension whizard-logging logging.kubesphere.io/enable-loggingsidecar=$result
                exit 0
              fi

              overrides_clusters=$(echo $json_file | jq '.spec.clusterScheduling.overrides' | jq 'keys')
              overrides_clusters_array=($(echo "$overrides_clusters" | jq -r '.[]'))
              result=""
              delimiter=","
              for cluster in "${placement_clusters[@]}"; do
              enabled=$default_config_enabled
              if string_in_array "$cluster" "${overrides_clusters_array[@]}"; then
                logsidecar_enabled=$(echo "$json_file" | jq ".spec.clusterScheduling.overrides.$cluster")
                enabled=$(echo "$logsidecar_enabled" | grep -oP 'enabled: \K[^"]+' | sed 's/\\n//g' | awk '{print $1}')
                if [ -z "$enabled" ]; then
                  enabled=$default_config_enabled
                fi
              fi
              if [ "$enabled" == "true" ]; then
                result+="$element$delimiter"
              fi
              done
              echo $json_file
              result="${result%$delimiter}"
              echo "result:$result"
              kubectl annotate --overwrite extension whizard-logging logging.kubesphere.io/enable-loggingsidecar=$result
{{ end }}